{"version":3,"sources":["components/Search.jsx","components/Helper.jsx","components/StudentsTable.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","e","inputValue","target","value","setState","handleSubmit","preventDefault","search","state","tip","react_default","a","createElement","className","onSubmit","id","htmlFor","name","onChange","status","type","React","Component","Helper","statuses","ok","studentFail","mentorFail","waitingForChecking","doneInAdvance","inProgress","todo","StudentsTable","tasksStatuses","tasksTitles","tasks","map","task","index","key","students","group","student","studentTds","taskLink","taskStatus","isFound","taskScore","forEach","solution","num","score","link","href","data-tooltip","concat","studentGh","mentorName","mentorGh","components_Helper","App","mentor","groups","localStorage","setItem","searchStatus","getStudents","require","getItem","components_StudentsTable","components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.756f59ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { inputValue: '' }\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        let inputValue = e.target.value;\r\n        this.setState({ inputValue });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.search(this.state.inputValue);\r\n    }\r\n\r\n    render() {\r\n        const tip = <p className='error'>Not found, try to enter your name</p>\r\n\r\n        return (\r\n            <form onSubmit={ this.handleSubmit } id='searchForm'>\r\n                <label htmlFor='search'>\r\n                    Enter your github name\r\n                    <input name='search' id='search' value={ this.state.inputValue } onChange={ this.handleInputChange }/>\r\n                    { this.props.status === 'not found' ? tip : '' }\r\n                </label>\r\n                <input type='submit' value='search'/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\n\nclass Helper extends React.Component {\n  render() {\n    return (\n\t\t<div>\n\t\t\t<p>You can hover on cell and see a score. If you see a score, you can click on a cell and go to the solution link</p>\n\t\t\t<table className='statuses'>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Situation</th>\n\t\t\t\t\t\t<th>Color</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'Checked' or 'Checking' and there is a score</td>\n\t\t\t\t\t\t<td className={this.props.statuses.ok}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'Checked' or 'Checking' and there is no link</td>\n\t\t\t\t\t\t<td className={this.props.statuses.studentFail}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'Checked', there is no score, but there is a link</td>\n\t\t\t\t\t\t<td className={this.props.statuses.mentorFail}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'Checking' and there is a link</td>\n\t\t\t\t\t\t<td className={this.props.statuses.waitingForChecking}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'In progress' and there is a link</td>\n\t\t\t\t\t\t<td className={this.props.statuses.doneInAdvance}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'In progress' and there is no link</td>\n\t\t\t\t\t\t<td className={this.props.statuses.inProgress}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Task status 'ToDo'</td>\n\t\t\t\t\t\t<td className={this.props.statuses.todo}></td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n    );\n  }\n}\n\nexport default Helper;","import React from 'react';\r\n\r\nimport Helper from './Helper.jsx';\r\n\r\nclass StudentsTable extends React.Component {\r\n    render() {\r\n        let tasksStatuses = {\r\n            ok: 'ok',\r\n            studentFail: 'studentFail',\r\n            mentorFail: 'mentorFail',\r\n            waitingForChecking: 'waitingForChecking',\r\n            doneInAdvance: 'doneInAdvance',\r\n            inProgress: 'inProgress',\r\n            todo: 'todo',\r\n        }\r\n\r\n        let tasksTitles = this.props.tasks.map((task, index) => {\r\n            return <th key={index}>{task[0]}</th>\r\n        });\r\n\r\n        let students = this.props.group.students.map((student, index) => {\r\n            let studentTds = this.props.tasks.map((task, index) => {\r\n                let isFound = false;\r\n\r\n                let taskScore = null;\r\n                let taskLink;\r\n                let taskStatus;\r\n\r\n                student.tasks.forEach((solution) => {\r\n                    if (index === solution.num && !isFound) {\r\n                        taskScore = solution.score;\r\n                        taskLink = solution.link;\r\n\r\n                        isFound = false;\r\n                    }\r\n                });\r\n\r\n                if (task[1] === 'Checked') {\r\n                    if (taskScore) taskStatus = tasksStatuses.ok;\r\n                    else if (!taskLink) taskStatus = tasksStatuses.studentFail;\r\n                    else taskStatus = tasksStatuses.mentorFail;\r\n                }\r\n\r\n                if (task[1] === 'Checking') {\r\n                    if (taskScore) taskStatus = tasksStatuses.ok;\r\n                    else if (!taskLink) taskStatus = tasksStatuses.studentFail;\r\n                    else taskStatus = tasksStatuses.waitingForChecking;\r\n                }\r\n\r\n                if (task[1] === 'In Progress') {\r\n                    if (taskLink) taskStatus = tasksStatuses.doneInAdvance;\r\n                    else taskStatus = tasksStatuses.inProgress;\r\n                }\r\n\r\n                if (task[1] === 'ToDo') taskStatus = tasksStatuses.todo;\r\n\r\n                return <td key={index} className={taskStatus}><a href={taskLink || '#'} data-tooltip={taskScore} className='transparent-text'>.</a></td>\r\n            });\r\n\r\n            return <tr key={index}>\r\n                        <td>\r\n                            <a href={`https://github.com/${student.studentGh}`}>\r\n                                {student.studentGh}\r\n                            </a>\r\n                        </td>\r\n                        {studentTds}\r\n                    </tr>\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className='mentor'>Mentor: \r\n                    {this.props.group.mentorName}\r\n                    (gh: \r\n                        <a href={`https://github.com/${this.props.mentorGh}`}>\r\n                            {this.props.mentorGh}\r\n                        </a>\r\n                    )\r\n                </div>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            {tasksTitles}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {students}\r\n                    </tbody>\r\n                </table>\r\n                <Helper statuses={tasksStatuses}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StudentsTable;","import React, { Component } from 'react';\r\n\r\nimport Search from './components/Search';\r\nimport StudentsTable from './components/StudentsTable';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let groups = require('./jsons/groupsWithScore.json');\r\n    let tasks = require('./jsons/tasks.json');\r\n\r\n    let mentor = localStorage.getItem('mentor') || null;\r\n\r\n    this.state = { searchStatus: 'search', mentor, groups, tasks, };\r\n  }\r\n\r\n  search = (value) => {\r\n    let mentor = value;\r\n\r\n    if (this.state.groups[mentor]) {\r\n      localStorage.setItem('mentor', mentor);\r\n      this.setState({ searchStatus: 'success', mentor, });\r\n    } else {\r\n      this.setState({ searchStatus: 'not found' });\r\n    }\r\n  }\r\n\r\n  getStudents = (mentor) => {\r\n    return this.state.groups[mentor];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1>Mentor dashboard</h1>\r\n\t\t\t{\r\n\t\t\t\tthis.state.mentor ?\r\n\t\t\t\t<StudentsTable group={ this.getStudents(this.state.mentor) } tasks={ this.state.tasks } mentorGh={ this.state.mentor }/>\r\n\t\t\t\t:\r\n\t\t\t\t<Search search={ this.search } status={ this.state.searchStatus }/>\r\n\t\t\t}\r\n\t\t\t<p className='tip'>created by <a href='https://nastyalo.github.io/rsschool-codejam1-cv/'>Nastya Loyko</a></p>\r\n\t\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './css/index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}